// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/cirglo.com/dfs/pkg/proto"
	mock "github.com/stretchr/testify/mock"
)

// NameServer is an autogenerated mock type for the NameServer type
type NameServer struct {
	mock.Mock
}

type NameServer_Expecter struct {
	mock *mock.Mock
}

func (_m *NameServer) EXPECT() *NameServer_Expecter {
	return &NameServer_Expecter{mock: &_m.Mock}
}

// CreateDir provides a mock function with given fields: _a0, _a1
func (_m *NameServer) CreateDir(_a0 context.Context, _a1 *proto.CreateDirRequest) (*proto.CreateDirResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDir")
	}

	var r0 *proto.CreateDirResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateDirRequest) (*proto.CreateDirResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateDirRequest) *proto.CreateDirResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateDirResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateDirRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_CreateDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDir'
type NameServer_CreateDir_Call struct {
	*mock.Call
}

// CreateDir is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.CreateDirRequest
func (_e *NameServer_Expecter) CreateDir(_a0 interface{}, _a1 interface{}) *NameServer_CreateDir_Call {
	return &NameServer_CreateDir_Call{Call: _e.mock.On("CreateDir", _a0, _a1)}
}

func (_c *NameServer_CreateDir_Call) Run(run func(_a0 context.Context, _a1 *proto.CreateDirRequest)) *NameServer_CreateDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.CreateDirRequest))
	})
	return _c
}

func (_c *NameServer_CreateDir_Call) Return(_a0 *proto.CreateDirResponse, _a1 error) *NameServer_CreateDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_CreateDir_Call) RunAndReturn(run func(context.Context, *proto.CreateDirRequest) (*proto.CreateDirResponse, error)) *NameServer_CreateDir_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFile provides a mock function with given fields: _a0, _a1
func (_m *NameServer) CreateFile(_a0 context.Context, _a1 *proto.CreateFileRequest) (*proto.CreateFileResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 *proto.CreateFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateFileRequest) (*proto.CreateFileResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateFileRequest) *proto.CreateFileResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateFileRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_CreateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFile'
type NameServer_CreateFile_Call struct {
	*mock.Call
}

// CreateFile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.CreateFileRequest
func (_e *NameServer_Expecter) CreateFile(_a0 interface{}, _a1 interface{}) *NameServer_CreateFile_Call {
	return &NameServer_CreateFile_Call{Call: _e.mock.On("CreateFile", _a0, _a1)}
}

func (_c *NameServer_CreateFile_Call) Run(run func(_a0 context.Context, _a1 *proto.CreateFileRequest)) *NameServer_CreateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.CreateFileRequest))
	})
	return _c
}

func (_c *NameServer_CreateFile_Call) Return(_a0 *proto.CreateFileResponse, _a1 error) *NameServer_CreateFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_CreateFile_Call) RunAndReturn(run func(context.Context, *proto.CreateFileRequest) (*proto.CreateFileResponse, error)) *NameServer_CreateFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDir provides a mock function with given fields: _a0, _a1
func (_m *NameServer) DeleteDir(_a0 context.Context, _a1 *proto.DeleteDirRequest) (*proto.DeleteDirResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDir")
	}

	var r0 *proto.DeleteDirResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteDirRequest) (*proto.DeleteDirResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteDirRequest) *proto.DeleteDirResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteDirResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteDirRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_DeleteDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDir'
type NameServer_DeleteDir_Call struct {
	*mock.Call
}

// DeleteDir is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.DeleteDirRequest
func (_e *NameServer_Expecter) DeleteDir(_a0 interface{}, _a1 interface{}) *NameServer_DeleteDir_Call {
	return &NameServer_DeleteDir_Call{Call: _e.mock.On("DeleteDir", _a0, _a1)}
}

func (_c *NameServer_DeleteDir_Call) Run(run func(_a0 context.Context, _a1 *proto.DeleteDirRequest)) *NameServer_DeleteDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.DeleteDirRequest))
	})
	return _c
}

func (_c *NameServer_DeleteDir_Call) Return(_a0 *proto.DeleteDirResponse, _a1 error) *NameServer_DeleteDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_DeleteDir_Call) RunAndReturn(run func(context.Context, *proto.DeleteDirRequest) (*proto.DeleteDirResponse, error)) *NameServer_DeleteDir_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: _a0, _a1
func (_m *NameServer) DeleteFile(_a0 context.Context, _a1 *proto.DeleteFileRequest) (*proto.DeleteFileResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 *proto.DeleteFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteFileRequest) (*proto.DeleteFileResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteFileRequest) *proto.DeleteFileResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteFileRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type NameServer_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.DeleteFileRequest
func (_e *NameServer_Expecter) DeleteFile(_a0 interface{}, _a1 interface{}) *NameServer_DeleteFile_Call {
	return &NameServer_DeleteFile_Call{Call: _e.mock.On("DeleteFile", _a0, _a1)}
}

func (_c *NameServer_DeleteFile_Call) Run(run func(_a0 context.Context, _a1 *proto.DeleteFileRequest)) *NameServer_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.DeleteFileRequest))
	})
	return _c
}

func (_c *NameServer_DeleteFile_Call) Return(_a0 *proto.DeleteFileResponse, _a1 error) *NameServer_DeleteFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_DeleteFile_Call) RunAndReturn(run func(context.Context, *proto.DeleteFileRequest) (*proto.DeleteFileResponse, error)) *NameServer_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *NameServer) List(_a0 context.Context, _a1 *proto.ListRequest) (*proto.ListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *proto.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListRequest) (*proto.ListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListRequest) *proto.ListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NameServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.ListRequest
func (_e *NameServer_Expecter) List(_a0 interface{}, _a1 interface{}) *NameServer_List_Call {
	return &NameServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *NameServer_List_Call) Run(run func(_a0 context.Context, _a1 *proto.ListRequest)) *NameServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ListRequest))
	})
	return _c
}

func (_c *NameServer_List_Call) Return(_a0 *proto.ListResponse, _a1 error) *NameServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_List_Call) RunAndReturn(run func(context.Context, *proto.ListRequest) (*proto.ListResponse, error)) *NameServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *NameServer) Login(_a0 context.Context, _a1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *proto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest) (*proto.LoginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest) *proto.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type NameServer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.LoginRequest
func (_e *NameServer_Expecter) Login(_a0 interface{}, _a1 interface{}) *NameServer_Login_Call {
	return &NameServer_Login_Call{Call: _e.mock.On("Login", _a0, _a1)}
}

func (_c *NameServer_Login_Call) Run(run func(_a0 context.Context, _a1 *proto.LoginRequest)) *NameServer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LoginRequest))
	})
	return _c
}

func (_c *NameServer_Login_Call) Return(_a0 *proto.LoginResponse, _a1 error) *NameServer_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_Login_Call) RunAndReturn(run func(context.Context, *proto.LoginRequest) (*proto.LoginResponse, error)) *NameServer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *NameServer) Logout(_a0 context.Context, _a1 *proto.LogoutRequest) (*proto.LogoutResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 *proto.LogoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogoutRequest) (*proto.LogoutResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogoutRequest) *proto.LogoutResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogoutRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type NameServer_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.LogoutRequest
func (_e *NameServer_Expecter) Logout(_a0 interface{}, _a1 interface{}) *NameServer_Logout_Call {
	return &NameServer_Logout_Call{Call: _e.mock.On("Logout", _a0, _a1)}
}

func (_c *NameServer_Logout_Call) Run(run func(_a0 context.Context, _a1 *proto.LogoutRequest)) *NameServer_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LogoutRequest))
	})
	return _c
}

func (_c *NameServer_Logout_Call) Return(_a0 *proto.LogoutResponse, _a1 error) *NameServer_Logout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_Logout_Call) RunAndReturn(run func(context.Context, *proto.LogoutRequest) (*proto.LogoutResponse, error)) *NameServer_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: _a0, _a1
func (_m *NameServer) Stat(_a0 context.Context, _a1 *proto.StatRequest) (*proto.StatResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 *proto.StatResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatRequest) (*proto.StatResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatRequest) *proto.StatResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.StatRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameServer_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type NameServer_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.StatRequest
func (_e *NameServer_Expecter) Stat(_a0 interface{}, _a1 interface{}) *NameServer_Stat_Call {
	return &NameServer_Stat_Call{Call: _e.mock.On("Stat", _a0, _a1)}
}

func (_c *NameServer_Stat_Call) Run(run func(_a0 context.Context, _a1 *proto.StatRequest)) *NameServer_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.StatRequest))
	})
	return _c
}

func (_c *NameServer_Stat_Call) Return(_a0 *proto.StatResponse, _a1 error) *NameServer_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameServer_Stat_Call) RunAndReturn(run func(context.Context, *proto.StatRequest) (*proto.StatResponse, error)) *NameServer_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedNameServer provides a mock function with no fields
func (_m *NameServer) mustEmbedUnimplementedNameServer() {
	_m.Called()
}

// NameServer_mustEmbedUnimplementedNameServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedNameServer'
type NameServer_mustEmbedUnimplementedNameServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedNameServer is a helper method to define mock.On call
func (_e *NameServer_Expecter) mustEmbedUnimplementedNameServer() *NameServer_mustEmbedUnimplementedNameServer_Call {
	return &NameServer_mustEmbedUnimplementedNameServer_Call{Call: _e.mock.On("mustEmbedUnimplementedNameServer")}
}

func (_c *NameServer_mustEmbedUnimplementedNameServer_Call) Run(run func()) *NameServer_mustEmbedUnimplementedNameServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NameServer_mustEmbedUnimplementedNameServer_Call) Return() *NameServer_mustEmbedUnimplementedNameServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *NameServer_mustEmbedUnimplementedNameServer_Call) RunAndReturn(run func()) *NameServer_mustEmbedUnimplementedNameServer_Call {
	_c.Run(run)
	return _c
}

// NewNameServer creates a new instance of NameServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNameServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NameServer {
	mock := &NameServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
