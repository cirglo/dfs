// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/cirglo.com/dfs/pkg/proto"
	mock "github.com/stretchr/testify/mock"
)

// AuthServer is an autogenerated mock type for the AuthServer type
type AuthServer struct {
	mock.Mock
}

type AuthServer_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServer) EXPECT() *AuthServer_Expecter {
	return &AuthServer_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Login(_a0 context.Context, _a1 *proto.LoginRequest) (*proto.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *proto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest) (*proto.LoginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest) *proto.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthServer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.LoginRequest
func (_e *AuthServer_Expecter) Login(_a0 interface{}, _a1 interface{}) *AuthServer_Login_Call {
	return &AuthServer_Login_Call{Call: _e.mock.On("Login", _a0, _a1)}
}

func (_c *AuthServer_Login_Call) Run(run func(_a0 context.Context, _a1 *proto.LoginRequest)) *AuthServer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LoginRequest))
	})
	return _c
}

func (_c *AuthServer_Login_Call) Return(_a0 *proto.LoginResponse, _a1 error) *AuthServer_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServer_Login_Call) RunAndReturn(run func(context.Context, *proto.LoginRequest) (*proto.LoginResponse, error)) *AuthServer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Logout(_a0 context.Context, _a1 *proto.LogoutRequest) (*proto.LogoutResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 *proto.LogoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogoutRequest) (*proto.LogoutResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogoutRequest) *proto.LogoutResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogoutRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServer_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthServer_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.LogoutRequest
func (_e *AuthServer_Expecter) Logout(_a0 interface{}, _a1 interface{}) *AuthServer_Logout_Call {
	return &AuthServer_Logout_Call{Call: _e.mock.On("Logout", _a0, _a1)}
}

func (_c *AuthServer_Logout_Call) Run(run func(_a0 context.Context, _a1 *proto.LogoutRequest)) *AuthServer_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LogoutRequest))
	})
	return _c
}

func (_c *AuthServer_Logout_Call) Return(_a0 *proto.LogoutResponse, _a1 error) *AuthServer_Logout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServer_Logout_Call) RunAndReturn(run func(context.Context, *proto.LogoutRequest) (*proto.LogoutResponse, error)) *AuthServer_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAuthServer provides a mock function with no fields
func (_m *AuthServer) mustEmbedUnimplementedAuthServer() {
	_m.Called()
}

// AuthServer_mustEmbedUnimplementedAuthServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAuthServer'
type AuthServer_mustEmbedUnimplementedAuthServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAuthServer is a helper method to define mock.On call
func (_e *AuthServer_Expecter) mustEmbedUnimplementedAuthServer() *AuthServer_mustEmbedUnimplementedAuthServer_Call {
	return &AuthServer_mustEmbedUnimplementedAuthServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAuthServer")}
}

func (_c *AuthServer_mustEmbedUnimplementedAuthServer_Call) Run(run func()) *AuthServer_mustEmbedUnimplementedAuthServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthServer_mustEmbedUnimplementedAuthServer_Call) Return() *AuthServer_mustEmbedUnimplementedAuthServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthServer_mustEmbedUnimplementedAuthServer_Call) RunAndReturn(run func()) *AuthServer_mustEmbedUnimplementedAuthServer_Call {
	_c.Run(run)
	return _c
}

// NewAuthServer creates a new instance of AuthServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServer {
	mock := &AuthServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
