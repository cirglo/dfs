// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/cirglo.com/dfs/pkg/proto"
	mock "github.com/stretchr/testify/mock"
)

// NotificationServer is an autogenerated mock type for the NotificationServer type
type NotificationServer struct {
	mock.Mock
}

type NotificationServer_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationServer) EXPECT() *NotificationServer_Expecter {
	return &NotificationServer_Expecter{mock: &_m.Mock}
}

// NotifyBlockAdded provides a mock function with given fields: _a0, _a1
func (_m *NotificationServer) NotifyBlockAdded(_a0 context.Context, _a1 *proto.NotifyBlockAddedRequest) (*proto.NotifyBlockAddedResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockAdded")
	}

	var r0 *proto.NotifyBlockAddedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockAddedRequest) (*proto.NotifyBlockAddedResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockAddedRequest) *proto.NotifyBlockAddedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NotifyBlockAddedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NotifyBlockAddedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServer_NotifyBlockAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockAdded'
type NotificationServer_NotifyBlockAdded_Call struct {
	*mock.Call
}

// NotifyBlockAdded is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.NotifyBlockAddedRequest
func (_e *NotificationServer_Expecter) NotifyBlockAdded(_a0 interface{}, _a1 interface{}) *NotificationServer_NotifyBlockAdded_Call {
	return &NotificationServer_NotifyBlockAdded_Call{Call: _e.mock.On("NotifyBlockAdded", _a0, _a1)}
}

func (_c *NotificationServer_NotifyBlockAdded_Call) Run(run func(_a0 context.Context, _a1 *proto.NotifyBlockAddedRequest)) *NotificationServer_NotifyBlockAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.NotifyBlockAddedRequest))
	})
	return _c
}

func (_c *NotificationServer_NotifyBlockAdded_Call) Return(_a0 *proto.NotifyBlockAddedResponse, _a1 error) *NotificationServer_NotifyBlockAdded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServer_NotifyBlockAdded_Call) RunAndReturn(run func(context.Context, *proto.NotifyBlockAddedRequest) (*proto.NotifyBlockAddedResponse, error)) *NotificationServer_NotifyBlockAdded_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyBlockPresent provides a mock function with given fields: _a0, _a1
func (_m *NotificationServer) NotifyBlockPresent(_a0 context.Context, _a1 *proto.NotifyBlockPresentRequest) (*proto.NotifyBlockPresentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockPresent")
	}

	var r0 *proto.NotifyBlockPresentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockPresentRequest) (*proto.NotifyBlockPresentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockPresentRequest) *proto.NotifyBlockPresentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NotifyBlockPresentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NotifyBlockPresentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServer_NotifyBlockPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockPresent'
type NotificationServer_NotifyBlockPresent_Call struct {
	*mock.Call
}

// NotifyBlockPresent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.NotifyBlockPresentRequest
func (_e *NotificationServer_Expecter) NotifyBlockPresent(_a0 interface{}, _a1 interface{}) *NotificationServer_NotifyBlockPresent_Call {
	return &NotificationServer_NotifyBlockPresent_Call{Call: _e.mock.On("NotifyBlockPresent", _a0, _a1)}
}

func (_c *NotificationServer_NotifyBlockPresent_Call) Run(run func(_a0 context.Context, _a1 *proto.NotifyBlockPresentRequest)) *NotificationServer_NotifyBlockPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.NotifyBlockPresentRequest))
	})
	return _c
}

func (_c *NotificationServer_NotifyBlockPresent_Call) Return(_a0 *proto.NotifyBlockPresentResponse, _a1 error) *NotificationServer_NotifyBlockPresent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServer_NotifyBlockPresent_Call) RunAndReturn(run func(context.Context, *proto.NotifyBlockPresentRequest) (*proto.NotifyBlockPresentResponse, error)) *NotificationServer_NotifyBlockPresent_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyBlockRemoved provides a mock function with given fields: _a0, _a1
func (_m *NotificationServer) NotifyBlockRemoved(_a0 context.Context, _a1 *proto.NotifyBlockRemovedRequest) (*proto.NotifyBlockRemovedResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockRemoved")
	}

	var r0 *proto.NotifyBlockRemovedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockRemovedRequest) (*proto.NotifyBlockRemovedResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockRemovedRequest) *proto.NotifyBlockRemovedResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NotifyBlockRemovedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NotifyBlockRemovedRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServer_NotifyBlockRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockRemoved'
type NotificationServer_NotifyBlockRemoved_Call struct {
	*mock.Call
}

// NotifyBlockRemoved is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.NotifyBlockRemovedRequest
func (_e *NotificationServer_Expecter) NotifyBlockRemoved(_a0 interface{}, _a1 interface{}) *NotificationServer_NotifyBlockRemoved_Call {
	return &NotificationServer_NotifyBlockRemoved_Call{Call: _e.mock.On("NotifyBlockRemoved", _a0, _a1)}
}

func (_c *NotificationServer_NotifyBlockRemoved_Call) Run(run func(_a0 context.Context, _a1 *proto.NotifyBlockRemovedRequest)) *NotificationServer_NotifyBlockRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.NotifyBlockRemovedRequest))
	})
	return _c
}

func (_c *NotificationServer_NotifyBlockRemoved_Call) Return(_a0 *proto.NotifyBlockRemovedResponse, _a1 error) *NotificationServer_NotifyBlockRemoved_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServer_NotifyBlockRemoved_Call) RunAndReturn(run func(context.Context, *proto.NotifyBlockRemovedRequest) (*proto.NotifyBlockRemovedResponse, error)) *NotificationServer_NotifyBlockRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedNotificationServer provides a mock function with no fields
func (_m *NotificationServer) mustEmbedUnimplementedNotificationServer() {
	_m.Called()
}

// NotificationServer_mustEmbedUnimplementedNotificationServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedNotificationServer'
type NotificationServer_mustEmbedUnimplementedNotificationServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedNotificationServer is a helper method to define mock.On call
func (_e *NotificationServer_Expecter) mustEmbedUnimplementedNotificationServer() *NotificationServer_mustEmbedUnimplementedNotificationServer_Call {
	return &NotificationServer_mustEmbedUnimplementedNotificationServer_Call{Call: _e.mock.On("mustEmbedUnimplementedNotificationServer")}
}

func (_c *NotificationServer_mustEmbedUnimplementedNotificationServer_Call) Run(run func()) *NotificationServer_mustEmbedUnimplementedNotificationServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NotificationServer_mustEmbedUnimplementedNotificationServer_Call) Return() *NotificationServer_mustEmbedUnimplementedNotificationServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *NotificationServer_mustEmbedUnimplementedNotificationServer_Call) RunAndReturn(run func()) *NotificationServer_mustEmbedUnimplementedNotificationServer_Call {
	_c.Run(run)
	return _c
}

// NewNotificationServer creates a new instance of NotificationServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationServer {
	mock := &NotificationServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
