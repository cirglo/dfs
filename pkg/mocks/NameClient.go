// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/cirglo.com/dfs/pkg/proto"
)

// NameClient is an autogenerated mock type for the NameClient type
type NameClient struct {
	mock.Mock
}

type NameClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NameClient) EXPECT() *NameClient_Expecter {
	return &NameClient_Expecter{mock: &_m.Mock}
}

// CreateDir provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) CreateDir(ctx context.Context, in *proto.CreateDirRequest, opts ...grpc.CallOption) (*proto.CreateDirResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDir")
	}

	var r0 *proto.CreateDirResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateDirRequest, ...grpc.CallOption) (*proto.CreateDirResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateDirRequest, ...grpc.CallOption) *proto.CreateDirResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateDirResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateDirRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_CreateDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDir'
type NameClient_CreateDir_Call struct {
	*mock.Call
}

// CreateDir is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateDirRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) CreateDir(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_CreateDir_Call {
	return &NameClient_CreateDir_Call{Call: _e.mock.On("CreateDir",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_CreateDir_Call) Run(run func(ctx context.Context, in *proto.CreateDirRequest, opts ...grpc.CallOption)) *NameClient_CreateDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateDirRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_CreateDir_Call) Return(_a0 *proto.CreateDirResponse, _a1 error) *NameClient_CreateDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_CreateDir_Call) RunAndReturn(run func(context.Context, *proto.CreateDirRequest, ...grpc.CallOption) (*proto.CreateDirResponse, error)) *NameClient_CreateDir_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFile provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) CreateFile(ctx context.Context, in *proto.CreateFileRequest, opts ...grpc.CallOption) (*proto.CreateFileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 *proto.CreateFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateFileRequest, ...grpc.CallOption) (*proto.CreateFileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateFileRequest, ...grpc.CallOption) *proto.CreateFileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateFileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_CreateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFile'
type NameClient_CreateFile_Call struct {
	*mock.Call
}

// CreateFile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateFileRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) CreateFile(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_CreateFile_Call {
	return &NameClient_CreateFile_Call{Call: _e.mock.On("CreateFile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_CreateFile_Call) Run(run func(ctx context.Context, in *proto.CreateFileRequest, opts ...grpc.CallOption)) *NameClient_CreateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CreateFileRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_CreateFile_Call) Return(_a0 *proto.CreateFileResponse, _a1 error) *NameClient_CreateFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_CreateFile_Call) RunAndReturn(run func(context.Context, *proto.CreateFileRequest, ...grpc.CallOption) (*proto.CreateFileResponse, error)) *NameClient_CreateFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDir provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) DeleteDir(ctx context.Context, in *proto.DeleteDirRequest, opts ...grpc.CallOption) (*proto.DeleteDirResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDir")
	}

	var r0 *proto.DeleteDirResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteDirRequest, ...grpc.CallOption) (*proto.DeleteDirResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteDirRequest, ...grpc.CallOption) *proto.DeleteDirResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteDirResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteDirRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_DeleteDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDir'
type NameClient_DeleteDir_Call struct {
	*mock.Call
}

// DeleteDir is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteDirRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) DeleteDir(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_DeleteDir_Call {
	return &NameClient_DeleteDir_Call{Call: _e.mock.On("DeleteDir",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_DeleteDir_Call) Run(run func(ctx context.Context, in *proto.DeleteDirRequest, opts ...grpc.CallOption)) *NameClient_DeleteDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.DeleteDirRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_DeleteDir_Call) Return(_a0 *proto.DeleteDirResponse, _a1 error) *NameClient_DeleteDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_DeleteDir_Call) RunAndReturn(run func(context.Context, *proto.DeleteDirRequest, ...grpc.CallOption) (*proto.DeleteDirResponse, error)) *NameClient_DeleteDir_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) DeleteFile(ctx context.Context, in *proto.DeleteFileRequest, opts ...grpc.CallOption) (*proto.DeleteFileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 *proto.DeleteFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteFileRequest, ...grpc.CallOption) (*proto.DeleteFileResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteFileRequest, ...grpc.CallOption) *proto.DeleteFileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteFileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type NameClient_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteFileRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) DeleteFile(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_DeleteFile_Call {
	return &NameClient_DeleteFile_Call{Call: _e.mock.On("DeleteFile",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_DeleteFile_Call) Run(run func(ctx context.Context, in *proto.DeleteFileRequest, opts ...grpc.CallOption)) *NameClient_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.DeleteFileRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_DeleteFile_Call) Return(_a0 *proto.DeleteFileResponse, _a1 error) *NameClient_DeleteFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_DeleteFile_Call) RunAndReturn(run func(context.Context, *proto.DeleteFileRequest, ...grpc.CallOption) (*proto.DeleteFileResponse, error)) *NameClient_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) List(ctx context.Context, in *proto.ListRequest, opts ...grpc.CallOption) (*proto.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *proto.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListRequest, ...grpc.CallOption) (*proto.ListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ListRequest, ...grpc.CallOption) *proto.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NameClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_List_Call {
	return &NameClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_List_Call) Run(run func(ctx context.Context, in *proto.ListRequest, opts ...grpc.CallOption)) *NameClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.ListRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_List_Call) Return(_a0 *proto.ListResponse, _a1 error) *NameClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_List_Call) RunAndReturn(run func(context.Context, *proto.ListRequest, ...grpc.CallOption) (*proto.ListResponse, error)) *NameClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *proto.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest, ...grpc.CallOption) (*proto.LoginResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LoginRequest, ...grpc.CallOption) *proto.LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type NameClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.LoginRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_Login_Call {
	return &NameClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_Login_Call) Run(run func(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption)) *NameClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.LoginRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_Login_Call) Return(_a0 *proto.LoginResponse, _a1 error) *NameClient_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_Login_Call) RunAndReturn(run func(context.Context, *proto.LoginRequest, ...grpc.CallOption) (*proto.LoginResponse, error)) *NameClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) Logout(ctx context.Context, in *proto.LogoutRequest, opts ...grpc.CallOption) (*proto.LogoutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 *proto.LogoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogoutRequest, ...grpc.CallOption) (*proto.LogoutResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.LogoutRequest, ...grpc.CallOption) *proto.LogoutResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.LogoutRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type NameClient_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.LogoutRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) Logout(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_Logout_Call {
	return &NameClient_Logout_Call{Call: _e.mock.On("Logout",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_Logout_Call) Run(run func(ctx context.Context, in *proto.LogoutRequest, opts ...grpc.CallOption)) *NameClient_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.LogoutRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_Logout_Call) Return(_a0 *proto.LogoutResponse, _a1 error) *NameClient_Logout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_Logout_Call) RunAndReturn(run func(context.Context, *proto.LogoutRequest, ...grpc.CallOption) (*proto.LogoutResponse, error)) *NameClient_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: ctx, in, opts
func (_m *NameClient) Stat(ctx context.Context, in *proto.StatRequest, opts ...grpc.CallOption) (*proto.StatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 *proto.StatResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatRequest, ...grpc.CallOption) (*proto.StatResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StatRequest, ...grpc.CallOption) *proto.StatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.StatRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NameClient_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type NameClient_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.StatRequest
//   - opts ...grpc.CallOption
func (_e *NameClient_Expecter) Stat(ctx interface{}, in interface{}, opts ...interface{}) *NameClient_Stat_Call {
	return &NameClient_Stat_Call{Call: _e.mock.On("Stat",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NameClient_Stat_Call) Run(run func(ctx context.Context, in *proto.StatRequest, opts ...grpc.CallOption)) *NameClient_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.StatRequest), variadicArgs...)
	})
	return _c
}

func (_c *NameClient_Stat_Call) Return(_a0 *proto.StatResponse, _a1 error) *NameClient_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NameClient_Stat_Call) RunAndReturn(run func(context.Context, *proto.StatRequest, ...grpc.CallOption) (*proto.StatResponse, error)) *NameClient_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewNameClient creates a new instance of NameClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNameClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NameClient {
	mock := &NameClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
