// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	node "github.com/cirglo.com/dfs/pkg/block"
	mock "github.com/stretchr/testify/mock"
)

// BlockService is an autogenerated mock type for the BlockService type
type BlockService struct {
	mock.Mock
}

type BlockService_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockService) EXPECT() *BlockService_Expecter {
	return &BlockService_Expecter{mock: &_m.Mock}
}

// DeleteBlock provides a mock function with given fields: id
func (_m *BlockService) DeleteBlock(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockService_DeleteBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlock'
type BlockService_DeleteBlock_Call struct {
	*mock.Call
}

// DeleteBlock is a helper method to define mock.On call
//   - id string
func (_e *BlockService_Expecter) DeleteBlock(id interface{}) *BlockService_DeleteBlock_Call {
	return &BlockService_DeleteBlock_Call{Call: _e.mock.On("DeleteBlock", id)}
}

func (_c *BlockService_DeleteBlock_Call) Run(run func(id string)) *BlockService_DeleteBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlockService_DeleteBlock_Call) Return(_a0 error) *BlockService_DeleteBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockService_DeleteBlock_Call) RunAndReturn(run func(string) error) *BlockService_DeleteBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockIds provides a mock function with no fields
func (_m *BlockService) GetBlockIds() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlockIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockService_GetBlockIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockIds'
type BlockService_GetBlockIds_Call struct {
	*mock.Call
}

// GetBlockIds is a helper method to define mock.On call
func (_e *BlockService_Expecter) GetBlockIds() *BlockService_GetBlockIds_Call {
	return &BlockService_GetBlockIds_Call{Call: _e.mock.On("GetBlockIds")}
}

func (_c *BlockService_GetBlockIds_Call) Run(run func()) *BlockService_GetBlockIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockService_GetBlockIds_Call) Return(_a0 []string, _a1 error) *BlockService_GetBlockIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockService_GetBlockIds_Call) RunAndReturn(run func() ([]string, error)) *BlockService_GetBlockIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlocks provides a mock function with no fields
func (_m *BlockService) GetBlocks() ([]node.BlockInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBlocks")
	}

	var r0 []node.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]node.BlockInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []node.BlockInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]node.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockService_GetBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlocks'
type BlockService_GetBlocks_Call struct {
	*mock.Call
}

// GetBlocks is a helper method to define mock.On call
func (_e *BlockService_Expecter) GetBlocks() *BlockService_GetBlocks_Call {
	return &BlockService_GetBlocks_Call{Call: _e.mock.On("GetBlocks")}
}

func (_c *BlockService_GetBlocks_Call) Run(run func()) *BlockService_GetBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockService_GetBlocks_Call) Return(_a0 []node.BlockInfo, _a1 error) *BlockService_GetBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlockService_GetBlocks_Call) RunAndReturn(run func() ([]node.BlockInfo, error)) *BlockService_GetBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with no fields
func (_m *BlockService) HealthCheck() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockService_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type BlockService_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
func (_e *BlockService_Expecter) HealthCheck() *BlockService_HealthCheck_Call {
	return &BlockService_HealthCheck_Call{Call: _e.mock.On("HealthCheck")}
}

func (_c *BlockService_HealthCheck_Call) Run(run func()) *BlockService_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockService_HealthCheck_Call) Return(_a0 error) *BlockService_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockService_HealthCheck_Call) RunAndReturn(run func() error) *BlockService_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBlock provides a mock function with given fields: id
func (_m *BlockService) ReadBlock(id string) ([]byte, node.BlockInfo, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadBlock")
	}

	var r0 []byte
	var r1 node.BlockInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, node.BlockInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) node.BlockInfo); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(node.BlockInfo)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BlockService_ReadBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBlock'
type BlockService_ReadBlock_Call struct {
	*mock.Call
}

// ReadBlock is a helper method to define mock.On call
//   - id string
func (_e *BlockService_Expecter) ReadBlock(id interface{}) *BlockService_ReadBlock_Call {
	return &BlockService_ReadBlock_Call{Call: _e.mock.On("ReadBlock", id)}
}

func (_c *BlockService_ReadBlock_Call) Run(run func(id string)) *BlockService_ReadBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BlockService_ReadBlock_Call) Return(_a0 []byte, _a1 node.BlockInfo, _a2 error) *BlockService_ReadBlock_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BlockService_ReadBlock_Call) RunAndReturn(run func(string) ([]byte, node.BlockInfo, error)) *BlockService_ReadBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function with no fields
func (_m *BlockService) Report() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Report")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockService_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type BlockService_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
func (_e *BlockService_Expecter) Report() *BlockService_Report_Call {
	return &BlockService_Report_Call{Call: _e.mock.On("Report")}
}

func (_c *BlockService_Report_Call) Run(run func()) *BlockService_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockService_Report_Call) Return(_a0 error) *BlockService_Report_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockService_Report_Call) RunAndReturn(run func() error) *BlockService_Report_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateCRC provides a mock function with no fields
func (_m *BlockService) ValidateCRC() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateCRC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockService_ValidateCRC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCRC'
type BlockService_ValidateCRC_Call struct {
	*mock.Call
}

// ValidateCRC is a helper method to define mock.On call
func (_e *BlockService_Expecter) ValidateCRC() *BlockService_ValidateCRC_Call {
	return &BlockService_ValidateCRC_Call{Call: _e.mock.On("ValidateCRC")}
}

func (_c *BlockService_ValidateCRC_Call) Run(run func()) *BlockService_ValidateCRC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BlockService_ValidateCRC_Call) Return(_a0 error) *BlockService_ValidateCRC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockService_ValidateCRC_Call) RunAndReturn(run func() error) *BlockService_ValidateCRC_Call {
	_c.Call.Return(run)
	return _c
}

// WriteBlock provides a mock function with given fields: id, path, sequence, data
func (_m *BlockService) WriteBlock(id string, path string, sequence uint64, data []byte) error {
	ret := _m.Called(id, path, sequence, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, uint64, []byte) error); ok {
		r0 = rf(id, path, sequence, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockService_WriteBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteBlock'
type BlockService_WriteBlock_Call struct {
	*mock.Call
}

// WriteBlock is a helper method to define mock.On call
//   - id string
//   - path string
//   - sequence uint64
//   - data []byte
func (_e *BlockService_Expecter) WriteBlock(id interface{}, path interface{}, sequence interface{}, data interface{}) *BlockService_WriteBlock_Call {
	return &BlockService_WriteBlock_Call{Call: _e.mock.On("WriteBlock", id, path, sequence, data)}
}

func (_c *BlockService_WriteBlock_Call) Run(run func(id string, path string, sequence uint64, data []byte)) *BlockService_WriteBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(uint64), args[3].([]byte))
	})
	return _c
}

func (_c *BlockService_WriteBlock_Call) Return(_a0 error) *BlockService_WriteBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockService_WriteBlock_Call) RunAndReturn(run func(string, string, uint64, []byte) error) *BlockService_WriteBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockService creates a new instance of BlockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockService {
	mock := &BlockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
