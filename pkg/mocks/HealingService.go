// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// HealingService is an autogenerated mock type for the HealingService type
type HealingService struct {
	mock.Mock
}

type HealingService_Expecter struct {
	mock *mock.Mock
}

func (_m *HealingService) EXPECT() *HealingService_Expecter {
	return &HealingService_Expecter{mock: &_m.Mock}
}

// Heal provides a mock function with given fields: since
func (_m *HealingService) Heal(since time.Time) error {
	ret := _m.Called(since)

	if len(ret) == 0 {
		panic("no return value specified for Heal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(since)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HealingService_Heal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heal'
type HealingService_Heal_Call struct {
	*mock.Call
}

// Heal is a helper method to define mock.On call
//   - since time.Time
func (_e *HealingService_Expecter) Heal(since interface{}) *HealingService_Heal_Call {
	return &HealingService_Heal_Call{Call: _e.mock.On("Heal", since)}
}

func (_c *HealingService_Heal_Call) Run(run func(since time.Time)) *HealingService_Heal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *HealingService_Heal_Call) Return(_a0 error) *HealingService_Heal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HealingService_Heal_Call) RunAndReturn(run func(time.Time) error) *HealingService_Heal_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyNodeAlive provides a mock function with given fields: host, at
func (_m *HealingService) NotifyNodeAlive(host string, at time.Time) {
	_m.Called(host, at)
}

// HealingService_NotifyNodeAlive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyNodeAlive'
type HealingService_NotifyNodeAlive_Call struct {
	*mock.Call
}

// NotifyNodeAlive is a helper method to define mock.On call
//   - host string
//   - at time.Time
func (_e *HealingService_Expecter) NotifyNodeAlive(host interface{}, at interface{}) *HealingService_NotifyNodeAlive_Call {
	return &HealingService_NotifyNodeAlive_Call{Call: _e.mock.On("NotifyNodeAlive", host, at)}
}

func (_c *HealingService_NotifyNodeAlive_Call) Run(run func(host string, at time.Time)) *HealingService_NotifyNodeAlive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *HealingService_NotifyNodeAlive_Call) Return() *HealingService_NotifyNodeAlive_Call {
	_c.Call.Return()
	return _c
}

func (_c *HealingService_NotifyNodeAlive_Call) RunAndReturn(run func(string, time.Time)) *HealingService_NotifyNodeAlive_Call {
	_c.Run(run)
	return _c
}

// NewHealingService creates a new instance of HealingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHealingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HealingService {
	mock := &HealingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
