// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	name "github.com/cirglo.com/dfs/pkg/name"
	mock "github.com/stretchr/testify/mock"
)

// SecurityService is an autogenerated mock type for the SecurityService type
type SecurityService struct {
	mock.Mock
}

type SecurityService_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityService) EXPECT() *SecurityService_Expecter {
	return &SecurityService_Expecter{mock: &_m.Mock}
}

// AddUserToGroup provides a mock function with given fields: userName, groupName
func (_m *SecurityService) AddUserToGroup(userName string, groupName string) error {
	ret := _m.Called(userName, groupName)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userName, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_AddUserToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroup'
type SecurityService_AddUserToGroup_Call struct {
	*mock.Call
}

// AddUserToGroup is a helper method to define mock.On call
//   - userName string
//   - groupName string
func (_e *SecurityService_Expecter) AddUserToGroup(userName interface{}, groupName interface{}) *SecurityService_AddUserToGroup_Call {
	return &SecurityService_AddUserToGroup_Call{Call: _e.mock.On("AddUserToGroup", userName, groupName)}
}

func (_c *SecurityService_AddUserToGroup_Call) Run(run func(userName string, groupName string)) *SecurityService_AddUserToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SecurityService_AddUserToGroup_Call) Return(_a0 error) *SecurityService_AddUserToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_AddUserToGroup_Call) RunAndReturn(run func(string, string) error) *SecurityService_AddUserToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AuthenticateUser provides a mock function with given fields: userName, password
func (_m *SecurityService) AuthenticateUser(userName string, password string) (string, error) {
	ret := _m.Called(userName, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(userName, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(userName, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userName, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityService_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type SecurityService_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - userName string
//   - password string
func (_e *SecurityService_Expecter) AuthenticateUser(userName interface{}, password interface{}) *SecurityService_AuthenticateUser_Call {
	return &SecurityService_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", userName, password)}
}

func (_c *SecurityService_AuthenticateUser_Call) Run(run func(userName string, password string)) *SecurityService_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SecurityService_AuthenticateUser_Call) Return(_a0 string, _a1 error) *SecurityService_AuthenticateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityService_AuthenticateUser_Call) RunAndReturn(run func(string, string) (string, error)) *SecurityService_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeUserPassword provides a mock function with given fields: userName, newPassword
func (_m *SecurityService) ChangeUserPassword(userName string, newPassword string) error {
	ret := _m.Called(userName, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangeUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userName, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_ChangeUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeUserPassword'
type SecurityService_ChangeUserPassword_Call struct {
	*mock.Call
}

// ChangeUserPassword is a helper method to define mock.On call
//   - userName string
//   - newPassword string
func (_e *SecurityService_Expecter) ChangeUserPassword(userName interface{}, newPassword interface{}) *SecurityService_ChangeUserPassword_Call {
	return &SecurityService_ChangeUserPassword_Call{Call: _e.mock.On("ChangeUserPassword", userName, newPassword)}
}

func (_c *SecurityService_ChangeUserPassword_Call) Run(run func(userName string, newPassword string)) *SecurityService_ChangeUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SecurityService_ChangeUserPassword_Call) Return(_a0 error) *SecurityService_ChangeUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_ChangeUserPassword_Call) RunAndReturn(run func(string, string) error) *SecurityService_ChangeUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: group
func (_m *SecurityService) CreateGroup(group name.Group) error {
	ret := _m.Called(group)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(name.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type SecurityService_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - group name.Group
func (_e *SecurityService_Expecter) CreateGroup(group interface{}) *SecurityService_CreateGroup_Call {
	return &SecurityService_CreateGroup_Call{Call: _e.mock.On("CreateGroup", group)}
}

func (_c *SecurityService_CreateGroup_Call) Run(run func(group name.Group)) *SecurityService_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Group))
	})
	return _c
}

func (_c *SecurityService_CreateGroup_Call) Return(_a0 error) *SecurityService_CreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_CreateGroup_Call) RunAndReturn(run func(name.Group) error) *SecurityService_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user
func (_m *SecurityService) CreateUser(user name.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(name.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type SecurityService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user name.User
func (_e *SecurityService_Expecter) CreateUser(user interface{}) *SecurityService_CreateUser_Call {
	return &SecurityService_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *SecurityService_CreateUser_Call) Run(run func(user name.User)) *SecurityService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.User))
	})
	return _c
}

func (_c *SecurityService_CreateUser_Call) Return(_a0 error) *SecurityService_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_CreateUser_Call) RunAndReturn(run func(name.User) error) *SecurityService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: groupName
func (_m *SecurityService) DeleteGroup(groupName string) error {
	ret := _m.Called(groupName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type SecurityService_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - groupName string
func (_e *SecurityService_Expecter) DeleteGroup(groupName interface{}) *SecurityService_DeleteGroup_Call {
	return &SecurityService_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", groupName)}
}

func (_c *SecurityService_DeleteGroup_Call) Run(run func(groupName string)) *SecurityService_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecurityService_DeleteGroup_Call) Return(_a0 error) *SecurityService_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_DeleteGroup_Call) RunAndReturn(run func(string) error) *SecurityService_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: userName
func (_m *SecurityService) DeleteUser(userName string) error {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type SecurityService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - userName string
func (_e *SecurityService_Expecter) DeleteUser(userName interface{}) *SecurityService_DeleteUser_Call {
	return &SecurityService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", userName)}
}

func (_c *SecurityService_DeleteUser_Call) Run(run func(userName string)) *SecurityService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecurityService_DeleteUser_Call) Return(_a0 error) *SecurityService_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_DeleteUser_Call) RunAndReturn(run func(string) error) *SecurityService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllGroups provides a mock function with no fields
func (_m *SecurityService) GetAllGroups() ([]name.Group, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroups")
	}

	var r0 []name.Group
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]name.Group, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []name.Group); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.Group)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityService_GetAllGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllGroups'
type SecurityService_GetAllGroups_Call struct {
	*mock.Call
}

// GetAllGroups is a helper method to define mock.On call
func (_e *SecurityService_Expecter) GetAllGroups() *SecurityService_GetAllGroups_Call {
	return &SecurityService_GetAllGroups_Call{Call: _e.mock.On("GetAllGroups")}
}

func (_c *SecurityService_GetAllGroups_Call) Run(run func()) *SecurityService_GetAllGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecurityService_GetAllGroups_Call) Return(_a0 []name.Group, _a1 error) *SecurityService_GetAllGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityService_GetAllGroups_Call) RunAndReturn(run func() ([]name.Group, error)) *SecurityService_GetAllGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with no fields
func (_m *SecurityService) GetAllUsers() ([]name.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []name.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]name.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []name.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type SecurityService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *SecurityService_Expecter) GetAllUsers() *SecurityService_GetAllUsers_Call {
	return &SecurityService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *SecurityService_GetAllUsers_Call) Run(run func()) *SecurityService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecurityService_GetAllUsers_Call) Return(_a0 []name.User, _a1 error) *SecurityService_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityService_GetAllUsers_Call) RunAndReturn(run func() ([]name.User, error)) *SecurityService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: groupName
func (_m *SecurityService) GetGroup(groupName string) (name.Group, error) {
	ret := _m.Called(groupName)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 name.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (name.Group, error)); ok {
		return rf(groupName)
	}
	if rf, ok := ret.Get(0).(func(string) name.Group); ok {
		r0 = rf(groupName)
	} else {
		r0 = ret.Get(0).(name.Group)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityService_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type SecurityService_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - groupName string
func (_e *SecurityService_Expecter) GetGroup(groupName interface{}) *SecurityService_GetGroup_Call {
	return &SecurityService_GetGroup_Call{Call: _e.mock.On("GetGroup", groupName)}
}

func (_c *SecurityService_GetGroup_Call) Run(run func(groupName string)) *SecurityService_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecurityService_GetGroup_Call) Return(_a0 name.Group, _a1 error) *SecurityService_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityService_GetGroup_Call) RunAndReturn(run func(string) (name.Group, error)) *SecurityService_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: userName
func (_m *SecurityService) GetUser(userName string) (name.User, error) {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 name.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (name.User, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) name.User); ok {
		r0 = rf(userName)
	} else {
		r0 = ret.Get(0).(name.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type SecurityService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userName string
func (_e *SecurityService_Expecter) GetUser(userName interface{}) *SecurityService_GetUser_Call {
	return &SecurityService_GetUser_Call{Call: _e.mock.On("GetUser", userName)}
}

func (_c *SecurityService_GetUser_Call) Run(run func(userName string)) *SecurityService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecurityService_GetUser_Call) Return(_a0 name.User, _a1 error) *SecurityService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityService_GetUser_Call) RunAndReturn(run func(string) (name.User, error)) *SecurityService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: token
func (_m *SecurityService) Logout(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type SecurityService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - token string
func (_e *SecurityService_Expecter) Logout(token interface{}) *SecurityService_Logout_Call {
	return &SecurityService_Logout_Call{Call: _e.mock.On("Logout", token)}
}

func (_c *SecurityService_Logout_Call) Run(run func(token string)) *SecurityService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecurityService_Logout_Call) Return(_a0 error) *SecurityService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_Logout_Call) RunAndReturn(run func(string) error) *SecurityService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// LookupUserByToken provides a mock function with given fields: token
func (_m *SecurityService) LookupUserByToken(token string) (name.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for LookupUserByToken")
	}

	var r0 name.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (name.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) name.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(name.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityService_LookupUserByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupUserByToken'
type SecurityService_LookupUserByToken_Call struct {
	*mock.Call
}

// LookupUserByToken is a helper method to define mock.On call
//   - token string
func (_e *SecurityService_Expecter) LookupUserByToken(token interface{}) *SecurityService_LookupUserByToken_Call {
	return &SecurityService_LookupUserByToken_Call{Call: _e.mock.On("LookupUserByToken", token)}
}

func (_c *SecurityService_LookupUserByToken_Call) Run(run func(token string)) *SecurityService_LookupUserByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SecurityService_LookupUserByToken_Call) Return(_a0 name.User, _a1 error) *SecurityService_LookupUserByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityService_LookupUserByToken_Call) RunAndReturn(run func(string) (name.User, error)) *SecurityService_LookupUserByToken_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroup provides a mock function with given fields: userName, groupName
func (_m *SecurityService) RemoveUserFromGroup(userName string, groupName string) error {
	ret := _m.Called(userName, groupName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userName, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityService_RemoveUserFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroup'
type SecurityService_RemoveUserFromGroup_Call struct {
	*mock.Call
}

// RemoveUserFromGroup is a helper method to define mock.On call
//   - userName string
//   - groupName string
func (_e *SecurityService_Expecter) RemoveUserFromGroup(userName interface{}, groupName interface{}) *SecurityService_RemoveUserFromGroup_Call {
	return &SecurityService_RemoveUserFromGroup_Call{Call: _e.mock.On("RemoveUserFromGroup", userName, groupName)}
}

func (_c *SecurityService_RemoveUserFromGroup_Call) Run(run func(userName string, groupName string)) *SecurityService_RemoveUserFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *SecurityService_RemoveUserFromGroup_Call) Return(_a0 error) *SecurityService_RemoveUserFromGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityService_RemoveUserFromGroup_Call) RunAndReturn(run func(string, string) error) *SecurityService_RemoveUserFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityService creates a new instance of SecurityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityService {
	mock := &SecurityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
