// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	name "github.com/cirglo.com/dfs/pkg/name"
	mock "github.com/stretchr/testify/mock"
)

// Principal is an autogenerated mock type for the Principal type
type Principal struct {
	mock.Mock
}

type Principal_Expecter struct {
	mock *mock.Mock
}

func (_m *Principal) EXPECT() *Principal_Expecter {
	return &Principal_Expecter{mock: &_m.Mock}
}

// ComputePrivileges provides a mock function with given fields: hasPermissionsList
func (_m *Principal) ComputePrivileges(hasPermissionsList ...name.HasPermissions) name.Privileges {
	_va := make([]interface{}, len(hasPermissionsList))
	for _i := range hasPermissionsList {
		_va[_i] = hasPermissionsList[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ComputePrivileges")
	}

	var r0 name.Privileges
	if rf, ok := ret.Get(0).(func(...name.HasPermissions) name.Privileges); ok {
		r0 = rf(hasPermissionsList...)
	} else {
		r0 = ret.Get(0).(name.Privileges)
	}

	return r0
}

// Principal_ComputePrivileges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComputePrivileges'
type Principal_ComputePrivileges_Call struct {
	*mock.Call
}

// ComputePrivileges is a helper method to define mock.On call
//   - hasPermissionsList ...name.HasPermissions
func (_e *Principal_Expecter) ComputePrivileges(hasPermissionsList ...interface{}) *Principal_ComputePrivileges_Call {
	return &Principal_ComputePrivileges_Call{Call: _e.mock.On("ComputePrivileges",
		append([]interface{}{}, hasPermissionsList...)...)}
}

func (_c *Principal_ComputePrivileges_Call) Run(run func(hasPermissionsList ...name.HasPermissions)) *Principal_ComputePrivileges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]name.HasPermissions, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(name.HasPermissions)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Principal_ComputePrivileges_Call) Return(_a0 name.Privileges) *Principal_ComputePrivileges_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Principal_ComputePrivileges_Call) RunAndReturn(run func(...name.HasPermissions) name.Privileges) *Principal_ComputePrivileges_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrincipal creates a new instance of Principal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrincipal(t interface {
	mock.TestingT
	Cleanup(func())
}) *Principal {
	mock := &Principal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
