// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/cirglo.com/dfs/pkg/proto"
)

// NotificationClient is an autogenerated mock type for the NotificationClient type
type NotificationClient struct {
	mock.Mock
}

type NotificationClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationClient) EXPECT() *NotificationClient_Expecter {
	return &NotificationClient_Expecter{mock: &_m.Mock}
}

// NotifyBlockAdded provides a mock function with given fields: ctx, in, opts
func (_m *NotificationClient) NotifyBlockAdded(ctx context.Context, in *proto.NotifyBlockAddedRequest, opts ...grpc.CallOption) (*proto.NotifyBlockAddedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockAdded")
	}

	var r0 *proto.NotifyBlockAddedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockAddedRequest, ...grpc.CallOption) (*proto.NotifyBlockAddedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockAddedRequest, ...grpc.CallOption) *proto.NotifyBlockAddedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NotifyBlockAddedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NotifyBlockAddedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationClient_NotifyBlockAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockAdded'
type NotificationClient_NotifyBlockAdded_Call struct {
	*mock.Call
}

// NotifyBlockAdded is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.NotifyBlockAddedRequest
//   - opts ...grpc.CallOption
func (_e *NotificationClient_Expecter) NotifyBlockAdded(ctx interface{}, in interface{}, opts ...interface{}) *NotificationClient_NotifyBlockAdded_Call {
	return &NotificationClient_NotifyBlockAdded_Call{Call: _e.mock.On("NotifyBlockAdded",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NotificationClient_NotifyBlockAdded_Call) Run(run func(ctx context.Context, in *proto.NotifyBlockAddedRequest, opts ...grpc.CallOption)) *NotificationClient_NotifyBlockAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.NotifyBlockAddedRequest), variadicArgs...)
	})
	return _c
}

func (_c *NotificationClient_NotifyBlockAdded_Call) Return(_a0 *proto.NotifyBlockAddedResponse, _a1 error) *NotificationClient_NotifyBlockAdded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationClient_NotifyBlockAdded_Call) RunAndReturn(run func(context.Context, *proto.NotifyBlockAddedRequest, ...grpc.CallOption) (*proto.NotifyBlockAddedResponse, error)) *NotificationClient_NotifyBlockAdded_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyBlockPresent provides a mock function with given fields: ctx, in, opts
func (_m *NotificationClient) NotifyBlockPresent(ctx context.Context, in *proto.NotifyBlockPresentRequest, opts ...grpc.CallOption) (*proto.NotifyBlockPresentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockPresent")
	}

	var r0 *proto.NotifyBlockPresentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockPresentRequest, ...grpc.CallOption) (*proto.NotifyBlockPresentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockPresentRequest, ...grpc.CallOption) *proto.NotifyBlockPresentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NotifyBlockPresentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NotifyBlockPresentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationClient_NotifyBlockPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockPresent'
type NotificationClient_NotifyBlockPresent_Call struct {
	*mock.Call
}

// NotifyBlockPresent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.NotifyBlockPresentRequest
//   - opts ...grpc.CallOption
func (_e *NotificationClient_Expecter) NotifyBlockPresent(ctx interface{}, in interface{}, opts ...interface{}) *NotificationClient_NotifyBlockPresent_Call {
	return &NotificationClient_NotifyBlockPresent_Call{Call: _e.mock.On("NotifyBlockPresent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NotificationClient_NotifyBlockPresent_Call) Run(run func(ctx context.Context, in *proto.NotifyBlockPresentRequest, opts ...grpc.CallOption)) *NotificationClient_NotifyBlockPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.NotifyBlockPresentRequest), variadicArgs...)
	})
	return _c
}

func (_c *NotificationClient_NotifyBlockPresent_Call) Return(_a0 *proto.NotifyBlockPresentResponse, _a1 error) *NotificationClient_NotifyBlockPresent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationClient_NotifyBlockPresent_Call) RunAndReturn(run func(context.Context, *proto.NotifyBlockPresentRequest, ...grpc.CallOption) (*proto.NotifyBlockPresentResponse, error)) *NotificationClient_NotifyBlockPresent_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyBlockRemoved provides a mock function with given fields: ctx, in, opts
func (_m *NotificationClient) NotifyBlockRemoved(ctx context.Context, in *proto.NotifyBlockRemovedRequest, opts ...grpc.CallOption) (*proto.NotifyBlockRemovedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockRemoved")
	}

	var r0 *proto.NotifyBlockRemovedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockRemovedRequest, ...grpc.CallOption) (*proto.NotifyBlockRemovedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.NotifyBlockRemovedRequest, ...grpc.CallOption) *proto.NotifyBlockRemovedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.NotifyBlockRemovedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.NotifyBlockRemovedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationClient_NotifyBlockRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockRemoved'
type NotificationClient_NotifyBlockRemoved_Call struct {
	*mock.Call
}

// NotifyBlockRemoved is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.NotifyBlockRemovedRequest
//   - opts ...grpc.CallOption
func (_e *NotificationClient_Expecter) NotifyBlockRemoved(ctx interface{}, in interface{}, opts ...interface{}) *NotificationClient_NotifyBlockRemoved_Call {
	return &NotificationClient_NotifyBlockRemoved_Call{Call: _e.mock.On("NotifyBlockRemoved",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NotificationClient_NotifyBlockRemoved_Call) Run(run func(ctx context.Context, in *proto.NotifyBlockRemovedRequest, opts ...grpc.CallOption)) *NotificationClient_NotifyBlockRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.NotifyBlockRemovedRequest), variadicArgs...)
	})
	return _c
}

func (_c *NotificationClient_NotifyBlockRemoved_Call) Return(_a0 *proto.NotifyBlockRemovedResponse, _a1 error) *NotificationClient_NotifyBlockRemoved_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationClient_NotifyBlockRemoved_Call) RunAndReturn(run func(context.Context, *proto.NotifyBlockRemovedRequest, ...grpc.CallOption) (*proto.NotifyBlockRemovedResponse, error)) *NotificationClient_NotifyBlockRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationClient creates a new instance of NotificationClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationClient {
	mock := &NotificationClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
