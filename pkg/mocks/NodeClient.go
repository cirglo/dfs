// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/cirglo.com/dfs/pkg/proto"
)

// NodeClient is an autogenerated mock type for the NodeClient type
type NodeClient struct {
	mock.Mock
}

type NodeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeClient) EXPECT() *NodeClient_Expecter {
	return &NodeClient_Expecter{mock: &_m.Mock}
}

// CopyBlock provides a mock function with given fields: ctx, in, opts
func (_m *NodeClient) CopyBlock(ctx context.Context, in *proto.CopyBlockRequest, opts ...grpc.CallOption) (*proto.CopyBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyBlock")
	}

	var r0 *proto.CopyBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CopyBlockRequest, ...grpc.CallOption) (*proto.CopyBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CopyBlockRequest, ...grpc.CallOption) *proto.CopyBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CopyBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CopyBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_CopyBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyBlock'
type NodeClient_CopyBlock_Call struct {
	*mock.Call
}

// CopyBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CopyBlockRequest
//   - opts ...grpc.CallOption
func (_e *NodeClient_Expecter) CopyBlock(ctx interface{}, in interface{}, opts ...interface{}) *NodeClient_CopyBlock_Call {
	return &NodeClient_CopyBlock_Call{Call: _e.mock.On("CopyBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeClient_CopyBlock_Call) Run(run func(ctx context.Context, in *proto.CopyBlockRequest, opts ...grpc.CallOption)) *NodeClient_CopyBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.CopyBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeClient_CopyBlock_Call) Return(_a0 *proto.CopyBlockResponse, _a1 error) *NodeClient_CopyBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_CopyBlock_Call) RunAndReturn(run func(context.Context, *proto.CopyBlockRequest, ...grpc.CallOption) (*proto.CopyBlockResponse, error)) *NodeClient_CopyBlock_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlock provides a mock function with given fields: ctx, in, opts
func (_m *NodeClient) DeleteBlock(ctx context.Context, in *proto.DeleteBlockRequest, opts ...grpc.CallOption) (*proto.DeleteBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlock")
	}

	var r0 *proto.DeleteBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteBlockRequest, ...grpc.CallOption) (*proto.DeleteBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteBlockRequest, ...grpc.CallOption) *proto.DeleteBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.DeleteBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_DeleteBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlock'
type NodeClient_DeleteBlock_Call struct {
	*mock.Call
}

// DeleteBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteBlockRequest
//   - opts ...grpc.CallOption
func (_e *NodeClient_Expecter) DeleteBlock(ctx interface{}, in interface{}, opts ...interface{}) *NodeClient_DeleteBlock_Call {
	return &NodeClient_DeleteBlock_Call{Call: _e.mock.On("DeleteBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeClient_DeleteBlock_Call) Run(run func(ctx context.Context, in *proto.DeleteBlockRequest, opts ...grpc.CallOption)) *NodeClient_DeleteBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.DeleteBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeClient_DeleteBlock_Call) Return(_a0 *proto.DeleteBlockResponse, _a1 error) *NodeClient_DeleteBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_DeleteBlock_Call) RunAndReturn(run func(context.Context, *proto.DeleteBlockRequest, ...grpc.CallOption) (*proto.DeleteBlockResponse, error)) *NodeClient_DeleteBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlock provides a mock function with given fields: ctx, in, opts
func (_m *NodeClient) GetBlock(ctx context.Context, in *proto.GetBlockRequest, opts ...grpc.CallOption) (*proto.GetBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 *proto.GetBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockRequest, ...grpc.CallOption) (*proto.GetBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockRequest, ...grpc.CallOption) *proto.GetBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type NodeClient_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetBlockRequest
//   - opts ...grpc.CallOption
func (_e *NodeClient_Expecter) GetBlock(ctx interface{}, in interface{}, opts ...interface{}) *NodeClient_GetBlock_Call {
	return &NodeClient_GetBlock_Call{Call: _e.mock.On("GetBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeClient_GetBlock_Call) Run(run func(ctx context.Context, in *proto.GetBlockRequest, opts ...grpc.CallOption)) *NodeClient_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeClient_GetBlock_Call) Return(_a0 *proto.GetBlockResponse, _a1 error) *NodeClient_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetBlock_Call) RunAndReturn(run func(context.Context, *proto.GetBlockRequest, ...grpc.CallOption) (*proto.GetBlockResponse, error)) *NodeClient_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockInfo provides a mock function with given fields: ctx, in, opts
func (_m *NodeClient) GetBlockInfo(ctx context.Context, in *proto.GetBlockInfoRequest, opts ...grpc.CallOption) (*proto.GetBlockInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockInfo")
	}

	var r0 *proto.GetBlockInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockInfoRequest, ...grpc.CallOption) (*proto.GetBlockInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockInfoRequest, ...grpc.CallOption) *proto.GetBlockInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBlockInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBlockInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetBlockInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockInfo'
type NodeClient_GetBlockInfo_Call struct {
	*mock.Call
}

// GetBlockInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetBlockInfoRequest
//   - opts ...grpc.CallOption
func (_e *NodeClient_Expecter) GetBlockInfo(ctx interface{}, in interface{}, opts ...interface{}) *NodeClient_GetBlockInfo_Call {
	return &NodeClient_GetBlockInfo_Call{Call: _e.mock.On("GetBlockInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeClient_GetBlockInfo_Call) Run(run func(ctx context.Context, in *proto.GetBlockInfoRequest, opts ...grpc.CallOption)) *NodeClient_GetBlockInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetBlockInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeClient_GetBlockInfo_Call) Return(_a0 *proto.GetBlockInfoResponse, _a1 error) *NodeClient_GetBlockInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetBlockInfo_Call) RunAndReturn(run func(context.Context, *proto.GetBlockInfoRequest, ...grpc.CallOption) (*proto.GetBlockInfoResponse, error)) *NodeClient_GetBlockInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockInfos provides a mock function with given fields: ctx, in, opts
func (_m *NodeClient) GetBlockInfos(ctx context.Context, in *proto.GetBlockInfosRequest, opts ...grpc.CallOption) (*proto.GetBlockInfosResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockInfos")
	}

	var r0 *proto.GetBlockInfosResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockInfosRequest, ...grpc.CallOption) (*proto.GetBlockInfosResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetBlockInfosRequest, ...grpc.CallOption) *proto.GetBlockInfosResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetBlockInfosResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetBlockInfosRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_GetBlockInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockInfos'
type NodeClient_GetBlockInfos_Call struct {
	*mock.Call
}

// GetBlockInfos is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetBlockInfosRequest
//   - opts ...grpc.CallOption
func (_e *NodeClient_Expecter) GetBlockInfos(ctx interface{}, in interface{}, opts ...interface{}) *NodeClient_GetBlockInfos_Call {
	return &NodeClient_GetBlockInfos_Call{Call: _e.mock.On("GetBlockInfos",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeClient_GetBlockInfos_Call) Run(run func(ctx context.Context, in *proto.GetBlockInfosRequest, opts ...grpc.CallOption)) *NodeClient_GetBlockInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.GetBlockInfosRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeClient_GetBlockInfos_Call) Return(_a0 *proto.GetBlockInfosResponse, _a1 error) *NodeClient_GetBlockInfos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_GetBlockInfos_Call) RunAndReturn(run func(context.Context, *proto.GetBlockInfosRequest, ...grpc.CallOption) (*proto.GetBlockInfosResponse, error)) *NodeClient_GetBlockInfos_Call {
	_c.Call.Return(run)
	return _c
}

// WriteBlock provides a mock function with given fields: ctx, in, opts
func (_m *NodeClient) WriteBlock(ctx context.Context, in *proto.WriteBlockRequest, opts ...grpc.CallOption) (*proto.WriteBlockResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteBlock")
	}

	var r0 *proto.WriteBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WriteBlockRequest, ...grpc.CallOption) (*proto.WriteBlockResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WriteBlockRequest, ...grpc.CallOption) *proto.WriteBlockResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.WriteBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WriteBlockRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeClient_WriteBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteBlock'
type NodeClient_WriteBlock_Call struct {
	*mock.Call
}

// WriteBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.WriteBlockRequest
//   - opts ...grpc.CallOption
func (_e *NodeClient_Expecter) WriteBlock(ctx interface{}, in interface{}, opts ...interface{}) *NodeClient_WriteBlock_Call {
	return &NodeClient_WriteBlock_Call{Call: _e.mock.On("WriteBlock",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NodeClient_WriteBlock_Call) Run(run func(ctx context.Context, in *proto.WriteBlockRequest, opts ...grpc.CallOption)) *NodeClient_WriteBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*proto.WriteBlockRequest), variadicArgs...)
	})
	return _c
}

func (_c *NodeClient_WriteBlock_Call) Return(_a0 *proto.WriteBlockResponse, _a1 error) *NodeClient_WriteBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeClient_WriteBlock_Call) RunAndReturn(run func(context.Context, *proto.WriteBlockRequest, ...grpc.CallOption) (*proto.WriteBlockResponse, error)) *NodeClient_WriteBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeClient creates a new instance of NodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeClient {
	mock := &NodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
