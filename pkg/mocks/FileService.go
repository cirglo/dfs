// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	name "github.com/cirglo.com/dfs/pkg/name"
	mock "github.com/stretchr/testify/mock"
)

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

type FileService_Expecter struct {
	mock *mock.Mock
}

func (_m *FileService) EXPECT() *FileService_Expecter {
	return &FileService_Expecter{mock: &_m.Mock}
}

// CreateDir provides a mock function with given fields: p, path, perms
func (_m *FileService) CreateDir(p name.Principal, path string, perms name.Permissions) (name.FileInfo, error) {
	ret := _m.Called(p, path, perms)

	if len(ret) == 0 {
		panic("no return value specified for CreateDir")
	}

	var r0 name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) (name.FileInfo, error)); ok {
		return rf(p, path, perms)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) name.FileInfo); ok {
		r0 = rf(p, path, perms)
	} else {
		r0 = ret.Get(0).(name.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string, name.Permissions) error); ok {
		r1 = rf(p, path, perms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_CreateDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDir'
type FileService_CreateDir_Call struct {
	*mock.Call
}

// CreateDir is a helper method to define mock.On call
//   - p name.Principal
//   - path string
//   - perms name.Permissions
func (_e *FileService_Expecter) CreateDir(p interface{}, path interface{}, perms interface{}) *FileService_CreateDir_Call {
	return &FileService_CreateDir_Call{Call: _e.mock.On("CreateDir", p, path, perms)}
}

func (_c *FileService_CreateDir_Call) Run(run func(p name.Principal, path string, perms name.Permissions)) *FileService_CreateDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string), args[2].(name.Permissions))
	})
	return _c
}

func (_c *FileService_CreateDir_Call) Return(_a0 name.FileInfo, _a1 error) *FileService_CreateDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_CreateDir_Call) RunAndReturn(run func(name.Principal, string, name.Permissions) (name.FileInfo, error)) *FileService_CreateDir_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFile provides a mock function with given fields: p, path, perms
func (_m *FileService) CreateFile(p name.Principal, path string, perms name.Permissions) (name.FileInfo, error) {
	ret := _m.Called(p, path, perms)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) (name.FileInfo, error)); ok {
		return rf(p, path, perms)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) name.FileInfo); ok {
		r0 = rf(p, path, perms)
	} else {
		r0 = ret.Get(0).(name.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string, name.Permissions) error); ok {
		r1 = rf(p, path, perms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_CreateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFile'
type FileService_CreateFile_Call struct {
	*mock.Call
}

// CreateFile is a helper method to define mock.On call
//   - p name.Principal
//   - path string
//   - perms name.Permissions
func (_e *FileService_Expecter) CreateFile(p interface{}, path interface{}, perms interface{}) *FileService_CreateFile_Call {
	return &FileService_CreateFile_Call{Call: _e.mock.On("CreateFile", p, path, perms)}
}

func (_c *FileService_CreateFile_Call) Run(run func(p name.Principal, path string, perms name.Permissions)) *FileService_CreateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string), args[2].(name.Permissions))
	})
	return _c
}

func (_c *FileService_CreateFile_Call) Return(_a0 name.FileInfo, _a1 error) *FileService_CreateFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_CreateFile_Call) RunAndReturn(run func(name.Principal, string, name.Permissions) (name.FileInfo, error)) *FileService_CreateFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDir provides a mock function with given fields: p, path
func (_m *FileService) DeleteDir(p name.Principal, path string) error {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) error); ok {
		r0 = rf(p, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_DeleteDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDir'
type FileService_DeleteDir_Call struct {
	*mock.Call
}

// DeleteDir is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) DeleteDir(p interface{}, path interface{}) *FileService_DeleteDir_Call {
	return &FileService_DeleteDir_Call{Call: _e.mock.On("DeleteDir", p, path)}
}

func (_c *FileService_DeleteDir_Call) Run(run func(p name.Principal, path string)) *FileService_DeleteDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_DeleteDir_Call) Return(_a0 error) *FileService_DeleteDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_DeleteDir_Call) RunAndReturn(run func(name.Principal, string) error) *FileService_DeleteDir_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: p, path
func (_m *FileService) DeleteFile(p name.Principal, path string) error {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) error); ok {
		r0 = rf(p, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type FileService_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) DeleteFile(p interface{}, path interface{}) *FileService_DeleteFile_Call {
	return &FileService_DeleteFile_Call{Call: _e.mock.On("DeleteFile", p, path)}
}

func (_c *FileService_DeleteFile_Call) Run(run func(p name.Principal, path string)) *FileService_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_DeleteFile_Call) Return(_a0 error) *FileService_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_DeleteFile_Call) RunAndReturn(run func(name.Principal, string) error) *FileService_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockInfos provides a mock function with given fields: p, path
func (_m *FileService) GetBlockInfos(p name.Principal, path string) ([]name.BlockInfo, error) {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockInfos")
	}

	var r0 []name.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) ([]name.BlockInfo, error)); ok {
		return rf(p, path)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string) []name.BlockInfo); ok {
		r0 = rf(p, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string) error); ok {
		r1 = rf(p, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_GetBlockInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockInfos'
type FileService_GetBlockInfos_Call struct {
	*mock.Call
}

// GetBlockInfos is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) GetBlockInfos(p interface{}, path interface{}) *FileService_GetBlockInfos_Call {
	return &FileService_GetBlockInfos_Call{Call: _e.mock.On("GetBlockInfos", p, path)}
}

func (_c *FileService_GetBlockInfos_Call) Run(run func(p name.Principal, path string)) *FileService_GetBlockInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_GetBlockInfos_Call) Return(_a0 []name.BlockInfo, _a1 error) *FileService_GetBlockInfos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_GetBlockInfos_Call) RunAndReturn(run func(name.Principal, string) ([]name.BlockInfo, error)) *FileService_GetBlockInfos_Call {
	_c.Call.Return(run)
	return _c
}

// ListDirs provides a mock function with given fields: p, path
func (_m *FileService) ListDirs(p name.Principal, path string) ([]name.DirInfo, error) {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for ListDirs")
	}

	var r0 []name.DirInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) ([]name.DirInfo, error)); ok {
		return rf(p, path)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string) []name.DirInfo); ok {
		r0 = rf(p, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.DirInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string) error); ok {
		r1 = rf(p, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_ListDirs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDirs'
type FileService_ListDirs_Call struct {
	*mock.Call
}

// ListDirs is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) ListDirs(p interface{}, path interface{}) *FileService_ListDirs_Call {
	return &FileService_ListDirs_Call{Call: _e.mock.On("ListDirs", p, path)}
}

func (_c *FileService_ListDirs_Call) Run(run func(p name.Principal, path string)) *FileService_ListDirs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_ListDirs_Call) Return(_a0 []name.DirInfo, _a1 error) *FileService_ListDirs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_ListDirs_Call) RunAndReturn(run func(name.Principal, string) ([]name.DirInfo, error)) *FileService_ListDirs_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function with given fields: p, path
func (_m *FileService) ListFiles(p name.Principal, path string) ([]name.FileInfo, error) {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 []name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) ([]name.FileInfo, error)); ok {
		return rf(p, path)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string) []name.FileInfo); ok {
		r0 = rf(p, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string) error); ok {
		r1 = rf(p, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type FileService_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) ListFiles(p interface{}, path interface{}) *FileService_ListFiles_Call {
	return &FileService_ListFiles_Call{Call: _e.mock.On("ListFiles", p, path)}
}

func (_c *FileService_ListFiles_Call) Run(run func(p name.Principal, path string)) *FileService_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_ListFiles_Call) Return(_a0 []name.FileInfo, _a1 error) *FileService_ListFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_ListFiles_Call) RunAndReturn(run func(name.Principal, string) ([]name.FileInfo, error)) *FileService_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// StatFile provides a mock function with given fields: p, filePath
func (_m *FileService) StatFile(p name.Principal, filePath string) (name.FileInfo, error) {
	ret := _m.Called(p, filePath)

	if len(ret) == 0 {
		panic("no return value specified for StatFile")
	}

	var r0 name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) (name.FileInfo, error)); ok {
		return rf(p, filePath)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string) name.FileInfo); ok {
		r0 = rf(p, filePath)
	} else {
		r0 = ret.Get(0).(name.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string) error); ok {
		r1 = rf(p, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_StatFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatFile'
type FileService_StatFile_Call struct {
	*mock.Call
}

// StatFile is a helper method to define mock.On call
//   - p name.Principal
//   - filePath string
func (_e *FileService_Expecter) StatFile(p interface{}, filePath interface{}) *FileService_StatFile_Call {
	return &FileService_StatFile_Call{Call: _e.mock.On("StatFile", p, filePath)}
}

func (_c *FileService_StatFile_Call) Run(run func(p name.Principal, filePath string)) *FileService_StatFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_StatFile_Call) Return(_a0 name.FileInfo, _a1 error) *FileService_StatFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_StatFile_Call) RunAndReturn(run func(name.Principal, string) (name.FileInfo, error)) *FileService_StatFile_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertBlockInfos provides a mock function with given fields: p, path, blockInfos
func (_m *FileService) UpsertBlockInfos(p name.Principal, path string, blockInfos []name.BlockInfo) error {
	ret := _m.Called(p, path, blockInfos)

	if len(ret) == 0 {
		panic("no return value specified for UpsertBlockInfos")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(name.Principal, string, []name.BlockInfo) error); ok {
		r0 = rf(p, path, blockInfos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_UpsertBlockInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertBlockInfos'
type FileService_UpsertBlockInfos_Call struct {
	*mock.Call
}

// UpsertBlockInfos is a helper method to define mock.On call
//   - p name.Principal
//   - path string
//   - blockInfos []name.BlockInfo
func (_e *FileService_Expecter) UpsertBlockInfos(p interface{}, path interface{}, blockInfos interface{}) *FileService_UpsertBlockInfos_Call {
	return &FileService_UpsertBlockInfos_Call{Call: _e.mock.On("UpsertBlockInfos", p, path, blockInfos)}
}

func (_c *FileService_UpsertBlockInfos_Call) Run(run func(p name.Principal, path string, blockInfos []name.BlockInfo)) *FileService_UpsertBlockInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string), args[2].([]name.BlockInfo))
	})
	return _c
}

func (_c *FileService_UpsertBlockInfos_Call) Return(_a0 error) *FileService_UpsertBlockInfos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_UpsertBlockInfos_Call) RunAndReturn(run func(name.Principal, string, []name.BlockInfo) error) *FileService_UpsertBlockInfos_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileService creates a new instance of FileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileService {
	mock := &FileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
