// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	name "github.com/cirglo.com/dfs/pkg/name"
	mock "github.com/stretchr/testify/mock"

	proto "github.com/cirglo.com/dfs/pkg/proto"
)

// FileService is an autogenerated mock type for the FileService type
type FileService struct {
	mock.Mock
}

type FileService_Expecter struct {
	mock *mock.Mock
}

func (_m *FileService) EXPECT() *FileService_Expecter {
	return &FileService_Expecter{mock: &_m.Mock}
}

// CreateDir provides a mock function with given fields: p, path, perms
func (_m *FileService) CreateDir(p name.Principal, path string, perms name.Permissions) (name.FileInfo, error) {
	ret := _m.Called(p, path, perms)

	if len(ret) == 0 {
		panic("no return value specified for CreateDir")
	}

	var r0 name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) (name.FileInfo, error)); ok {
		return rf(p, path, perms)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) name.FileInfo); ok {
		r0 = rf(p, path, perms)
	} else {
		r0 = ret.Get(0).(name.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string, name.Permissions) error); ok {
		r1 = rf(p, path, perms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_CreateDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDir'
type FileService_CreateDir_Call struct {
	*mock.Call
}

// CreateDir is a helper method to define mock.On call
//   - p name.Principal
//   - path string
//   - perms name.Permissions
func (_e *FileService_Expecter) CreateDir(p interface{}, path interface{}, perms interface{}) *FileService_CreateDir_Call {
	return &FileService_CreateDir_Call{Call: _e.mock.On("CreateDir", p, path, perms)}
}

func (_c *FileService_CreateDir_Call) Run(run func(p name.Principal, path string, perms name.Permissions)) *FileService_CreateDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string), args[2].(name.Permissions))
	})
	return _c
}

func (_c *FileService_CreateDir_Call) Return(_a0 name.FileInfo, _a1 error) *FileService_CreateDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_CreateDir_Call) RunAndReturn(run func(name.Principal, string, name.Permissions) (name.FileInfo, error)) *FileService_CreateDir_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFile provides a mock function with given fields: p, path, perms
func (_m *FileService) CreateFile(p name.Principal, path string, perms name.Permissions) (name.FileInfo, error) {
	ret := _m.Called(p, path, perms)

	if len(ret) == 0 {
		panic("no return value specified for CreateFile")
	}

	var r0 name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) (name.FileInfo, error)); ok {
		return rf(p, path, perms)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string, name.Permissions) name.FileInfo); ok {
		r0 = rf(p, path, perms)
	} else {
		r0 = ret.Get(0).(name.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string, name.Permissions) error); ok {
		r1 = rf(p, path, perms)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_CreateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFile'
type FileService_CreateFile_Call struct {
	*mock.Call
}

// CreateFile is a helper method to define mock.On call
//   - p name.Principal
//   - path string
//   - perms name.Permissions
func (_e *FileService_Expecter) CreateFile(p interface{}, path interface{}, perms interface{}) *FileService_CreateFile_Call {
	return &FileService_CreateFile_Call{Call: _e.mock.On("CreateFile", p, path, perms)}
}

func (_c *FileService_CreateFile_Call) Run(run func(p name.Principal, path string, perms name.Permissions)) *FileService_CreateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string), args[2].(name.Permissions))
	})
	return _c
}

func (_c *FileService_CreateFile_Call) Return(_a0 name.FileInfo, _a1 error) *FileService_CreateFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_CreateFile_Call) RunAndReturn(run func(name.Principal, string, name.Permissions) (name.FileInfo, error)) *FileService_CreateFile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDir provides a mock function with given fields: p, path
func (_m *FileService) DeleteDir(p name.Principal, path string) error {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) error); ok {
		r0 = rf(p, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_DeleteDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDir'
type FileService_DeleteDir_Call struct {
	*mock.Call
}

// DeleteDir is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) DeleteDir(p interface{}, path interface{}) *FileService_DeleteDir_Call {
	return &FileService_DeleteDir_Call{Call: _e.mock.On("DeleteDir", p, path)}
}

func (_c *FileService_DeleteDir_Call) Run(run func(p name.Principal, path string)) *FileService_DeleteDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_DeleteDir_Call) Return(_a0 error) *FileService_DeleteDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_DeleteDir_Call) RunAndReturn(run func(name.Principal, string) error) *FileService_DeleteDir_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function with given fields: p, path
func (_m *FileService) DeleteFile(p name.Principal, path string) error {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) error); ok {
		r0 = rf(p, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type FileService_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) DeleteFile(p interface{}, path interface{}) *FileService_DeleteFile_Call {
	return &FileService_DeleteFile_Call{Call: _e.mock.On("DeleteFile", p, path)}
}

func (_c *FileService_DeleteFile_Call) Run(run func(p name.Principal, path string)) *FileService_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_DeleteFile_Call) Return(_a0 error) *FileService_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_DeleteFile_Call) RunAndReturn(run func(name.Principal, string) error) *FileService_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBlockInfos provides a mock function with no fields
func (_m *FileService) GetAllBlockInfos() ([]name.BlockInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlockInfos")
	}

	var r0 []name.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]name.BlockInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []name.BlockInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_GetAllBlockInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBlockInfos'
type FileService_GetAllBlockInfos_Call struct {
	*mock.Call
}

// GetAllBlockInfos is a helper method to define mock.On call
func (_e *FileService_Expecter) GetAllBlockInfos() *FileService_GetAllBlockInfos_Call {
	return &FileService_GetAllBlockInfos_Call{Call: _e.mock.On("GetAllBlockInfos")}
}

func (_c *FileService_GetAllBlockInfos_Call) Run(run func()) *FileService_GetAllBlockInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileService_GetAllBlockInfos_Call) Return(_a0 []name.BlockInfo, _a1 error) *FileService_GetAllBlockInfos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_GetAllBlockInfos_Call) RunAndReturn(run func() ([]name.BlockInfo, error)) *FileService_GetAllBlockInfos_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockInfos provides a mock function with given fields: p, path
func (_m *FileService) GetBlockInfos(p name.Principal, path string) ([]name.BlockInfo, error) {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockInfos")
	}

	var r0 []name.BlockInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) ([]name.BlockInfo, error)); ok {
		return rf(p, path)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string) []name.BlockInfo); ok {
		r0 = rf(p, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.BlockInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string) error); ok {
		r1 = rf(p, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_GetBlockInfos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockInfos'
type FileService_GetBlockInfos_Call struct {
	*mock.Call
}

// GetBlockInfos is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) GetBlockInfos(p interface{}, path interface{}) *FileService_GetBlockInfos_Call {
	return &FileService_GetBlockInfos_Call{Call: _e.mock.On("GetBlockInfos", p, path)}
}

func (_c *FileService_GetBlockInfos_Call) Run(run func(p name.Principal, path string)) *FileService_GetBlockInfos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_GetBlockInfos_Call) Return(_a0 []name.BlockInfo, _a1 error) *FileService_GetBlockInfos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_GetBlockInfos_Call) RunAndReturn(run func(name.Principal, string) ([]name.BlockInfo, error)) *FileService_GetBlockInfos_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: p, path
func (_m *FileService) List(p name.Principal, path string) ([]name.FileInfo, error) {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) ([]name.FileInfo, error)); ok {
		return rf(p, path)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string) []name.FileInfo); ok {
		r0 = rf(p, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]name.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string) error); ok {
		r1 = rf(p, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FileService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) List(p interface{}, path interface{}) *FileService_List_Call {
	return &FileService_List_Call{Call: _e.mock.On("List", p, path)}
}

func (_c *FileService_List_Call) Run(run func(p name.Principal, path string)) *FileService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_List_Call) Return(_a0 []name.FileInfo, _a1 error) *FileService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_List_Call) RunAndReturn(run func(name.Principal, string) ([]name.FileInfo, error)) *FileService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NodeRemoved provides a mock function with given fields: host
func (_m *FileService) NodeRemoved(host string) error {
	ret := _m.Called(host)

	if len(ret) == 0 {
		panic("no return value specified for NodeRemoved")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(host)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_NodeRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeRemoved'
type FileService_NodeRemoved_Call struct {
	*mock.Call
}

// NodeRemoved is a helper method to define mock.On call
//   - host string
func (_e *FileService_Expecter) NodeRemoved(host interface{}) *FileService_NodeRemoved_Call {
	return &FileService_NodeRemoved_Call{Call: _e.mock.On("NodeRemoved", host)}
}

func (_c *FileService_NodeRemoved_Call) Run(run func(host string)) *FileService_NodeRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileService_NodeRemoved_Call) Return(_a0 error) *FileService_NodeRemoved_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_NodeRemoved_Call) RunAndReturn(run func(string) error) *FileService_NodeRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyBlockAdded provides a mock function with given fields: n
func (_m *FileService) NotifyBlockAdded(n *proto.NotifyBlockAddedRequest) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockAdded")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.NotifyBlockAddedRequest) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_NotifyBlockAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockAdded'
type FileService_NotifyBlockAdded_Call struct {
	*mock.Call
}

// NotifyBlockAdded is a helper method to define mock.On call
//   - n *proto.NotifyBlockAddedRequest
func (_e *FileService_Expecter) NotifyBlockAdded(n interface{}) *FileService_NotifyBlockAdded_Call {
	return &FileService_NotifyBlockAdded_Call{Call: _e.mock.On("NotifyBlockAdded", n)}
}

func (_c *FileService_NotifyBlockAdded_Call) Run(run func(n *proto.NotifyBlockAddedRequest)) *FileService_NotifyBlockAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.NotifyBlockAddedRequest))
	})
	return _c
}

func (_c *FileService_NotifyBlockAdded_Call) Return(_a0 error) *FileService_NotifyBlockAdded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_NotifyBlockAdded_Call) RunAndReturn(run func(*proto.NotifyBlockAddedRequest) error) *FileService_NotifyBlockAdded_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyBlockPresent provides a mock function with given fields: n
func (_m *FileService) NotifyBlockPresent(n *proto.NotifyBlockPresentRequest) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockPresent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.NotifyBlockPresentRequest) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_NotifyBlockPresent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockPresent'
type FileService_NotifyBlockPresent_Call struct {
	*mock.Call
}

// NotifyBlockPresent is a helper method to define mock.On call
//   - n *proto.NotifyBlockPresentRequest
func (_e *FileService_Expecter) NotifyBlockPresent(n interface{}) *FileService_NotifyBlockPresent_Call {
	return &FileService_NotifyBlockPresent_Call{Call: _e.mock.On("NotifyBlockPresent", n)}
}

func (_c *FileService_NotifyBlockPresent_Call) Run(run func(n *proto.NotifyBlockPresentRequest)) *FileService_NotifyBlockPresent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.NotifyBlockPresentRequest))
	})
	return _c
}

func (_c *FileService_NotifyBlockPresent_Call) Return(_a0 error) *FileService_NotifyBlockPresent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_NotifyBlockPresent_Call) RunAndReturn(run func(*proto.NotifyBlockPresentRequest) error) *FileService_NotifyBlockPresent_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyBlockRemoved provides a mock function with given fields: n
func (_m *FileService) NotifyBlockRemoved(n *proto.NotifyBlockRemovedRequest) error {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for NotifyBlockRemoved")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.NotifyBlockRemovedRequest) error); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileService_NotifyBlockRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyBlockRemoved'
type FileService_NotifyBlockRemoved_Call struct {
	*mock.Call
}

// NotifyBlockRemoved is a helper method to define mock.On call
//   - n *proto.NotifyBlockRemovedRequest
func (_e *FileService_Expecter) NotifyBlockRemoved(n interface{}) *FileService_NotifyBlockRemoved_Call {
	return &FileService_NotifyBlockRemoved_Call{Call: _e.mock.On("NotifyBlockRemoved", n)}
}

func (_c *FileService_NotifyBlockRemoved_Call) Run(run func(n *proto.NotifyBlockRemovedRequest)) *FileService_NotifyBlockRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.NotifyBlockRemovedRequest))
	})
	return _c
}

func (_c *FileService_NotifyBlockRemoved_Call) Return(_a0 error) *FileService_NotifyBlockRemoved_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileService_NotifyBlockRemoved_Call) RunAndReturn(run func(*proto.NotifyBlockRemovedRequest) error) *FileService_NotifyBlockRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function with given fields: p, path
func (_m *FileService) Stat(p name.Principal, path string) (name.FileInfo, error) {
	ret := _m.Called(p, path)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 name.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(name.Principal, string) (name.FileInfo, error)); ok {
		return rf(p, path)
	}
	if rf, ok := ret.Get(0).(func(name.Principal, string) name.FileInfo); ok {
		r0 = rf(p, path)
	} else {
		r0 = ret.Get(0).(name.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(name.Principal, string) error); ok {
		r1 = rf(p, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileService_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type FileService_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - p name.Principal
//   - path string
func (_e *FileService_Expecter) Stat(p interface{}, path interface{}) *FileService_Stat_Call {
	return &FileService_Stat_Call{Call: _e.mock.On("Stat", p, path)}
}

func (_c *FileService_Stat_Call) Run(run func(p name.Principal, path string)) *FileService_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(name.Principal), args[1].(string))
	})
	return _c
}

func (_c *FileService_Stat_Call) Return(_a0 name.FileInfo, _a1 error) *FileService_Stat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileService_Stat_Call) RunAndReturn(run func(name.Principal, string) (name.FileInfo, error)) *FileService_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileService creates a new instance of FileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileService {
	mock := &FileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
