// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NameInternal_ReportExistingBlocks_FullMethodName = "/nameserver.NameInternal/ReportExistingBlocks"
	NameInternal_NotifyBlocksAdded_FullMethodName    = "/nameserver.NameInternal/NotifyBlocksAdded"
	NameInternal_NotifyBlocksRemoved_FullMethodName  = "/nameserver.NameInternal/NotifyBlocksRemoved"
)

// NameInternalClient is the client API for NameInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameInternalClient interface {
	ReportExistingBlocks(ctx context.Context, in *BlockInfoReport, opts ...grpc.CallOption) (*BlockInfoReportResponse, error)
	NotifyBlocksAdded(ctx context.Context, in *BlockInfoReport, opts ...grpc.CallOption) (*BlockInfoReportResponse, error)
	NotifyBlocksRemoved(ctx context.Context, in *BlockInfoReport, opts ...grpc.CallOption) (*BlockInfoReportResponse, error)
}

type nameInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewNameInternalClient(cc grpc.ClientConnInterface) NameInternalClient {
	return &nameInternalClient{cc}
}

func (c *nameInternalClient) ReportExistingBlocks(ctx context.Context, in *BlockInfoReport, opts ...grpc.CallOption) (*BlockInfoReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockInfoReportResponse)
	err := c.cc.Invoke(ctx, NameInternal_ReportExistingBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameInternalClient) NotifyBlocksAdded(ctx context.Context, in *BlockInfoReport, opts ...grpc.CallOption) (*BlockInfoReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockInfoReportResponse)
	err := c.cc.Invoke(ctx, NameInternal_NotifyBlocksAdded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameInternalClient) NotifyBlocksRemoved(ctx context.Context, in *BlockInfoReport, opts ...grpc.CallOption) (*BlockInfoReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockInfoReportResponse)
	err := c.cc.Invoke(ctx, NameInternal_NotifyBlocksRemoved_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameInternalServer is the server API for NameInternal service.
// All implementations must embed UnimplementedNameInternalServer
// for forward compatibility.
type NameInternalServer interface {
	ReportExistingBlocks(context.Context, *BlockInfoReport) (*BlockInfoReportResponse, error)
	NotifyBlocksAdded(context.Context, *BlockInfoReport) (*BlockInfoReportResponse, error)
	NotifyBlocksRemoved(context.Context, *BlockInfoReport) (*BlockInfoReportResponse, error)
	mustEmbedUnimplementedNameInternalServer()
}

// UnimplementedNameInternalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNameInternalServer struct{}

func (UnimplementedNameInternalServer) ReportExistingBlocks(context.Context, *BlockInfoReport) (*BlockInfoReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportExistingBlocks not implemented")
}
func (UnimplementedNameInternalServer) NotifyBlocksAdded(context.Context, *BlockInfoReport) (*BlockInfoReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBlocksAdded not implemented")
}
func (UnimplementedNameInternalServer) NotifyBlocksRemoved(context.Context, *BlockInfoReport) (*BlockInfoReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBlocksRemoved not implemented")
}
func (UnimplementedNameInternalServer) mustEmbedUnimplementedNameInternalServer() {}
func (UnimplementedNameInternalServer) testEmbeddedByValue()                      {}

// UnsafeNameInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameInternalServer will
// result in compilation errors.
type UnsafeNameInternalServer interface {
	mustEmbedUnimplementedNameInternalServer()
}

func RegisterNameInternalServer(s grpc.ServiceRegistrar, srv NameInternalServer) {
	// If the following call pancis, it indicates UnimplementedNameInternalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NameInternal_ServiceDesc, srv)
}

func _NameInternal_ReportExistingBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockInfoReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameInternalServer).ReportExistingBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameInternal_ReportExistingBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameInternalServer).ReportExistingBlocks(ctx, req.(*BlockInfoReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameInternal_NotifyBlocksAdded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockInfoReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameInternalServer).NotifyBlocksAdded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameInternal_NotifyBlocksAdded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameInternalServer).NotifyBlocksAdded(ctx, req.(*BlockInfoReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameInternal_NotifyBlocksRemoved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockInfoReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameInternalServer).NotifyBlocksRemoved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameInternal_NotifyBlocksRemoved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameInternalServer).NotifyBlocksRemoved(ctx, req.(*BlockInfoReport))
	}
	return interceptor(ctx, in, info, handler)
}

// NameInternal_ServiceDesc is the grpc.ServiceDesc for NameInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nameserver.NameInternal",
	HandlerType: (*NameInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportExistingBlocks",
			Handler:    _NameInternal_ReportExistingBlocks_Handler,
		},
		{
			MethodName: "NotifyBlocksAdded",
			Handler:    _NameInternal_NotifyBlocksAdded_Handler,
		},
		{
			MethodName: "NotifyBlocksRemoved",
			Handler:    _NameInternal_NotifyBlocksRemoved_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}
