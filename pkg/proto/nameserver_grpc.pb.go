// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: nameserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NameServer_CreateFile_FullMethodName   = "/nameserver.NameServer/CreateFile"
	NameServer_CreateDir_FullMethodName    = "/nameserver.NameServer/CreateDir"
	NameServer_DeleteFile_FullMethodName   = "/nameserver.NameServer/DeleteFile"
	NameServer_DeleteDir_FullMethodName    = "/nameserver.NameServer/DeleteDir"
	NameServer_ListDir_FullMethodName      = "/nameserver.NameServer/ListDir"
	NameServer_StatFile_FullMethodName     = "/nameserver.NameServer/StatFile"
	NameServer_OpenFile_FullMethodName     = "/nameserver.NameServer/OpenFile"
	NameServer_CloseFile_FullMethodName    = "/nameserver.NameServer/CloseFile"
	NameServer_PrepareWrite_FullMethodName = "/nameserver.NameServer/PrepareWrite"
)

// NameServerClient is the client API for NameServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameServerClient interface {
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error)
	ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error)
	StatFile(ctx context.Context, in *StatFileRequest, opts ...grpc.CallOption) (*StatFileResponse, error)
	OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error)
	CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*CloseFileResponse, error)
	PrepareWrite(ctx context.Context, in *PrepareWriteRequest, opts ...grpc.CallOption) (*PrepareWriteResponse, error)
}

type nameServerClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServerClient(cc grpc.ClientConnInterface) NameServerClient {
	return &nameServerClient{cc}
}

func (c *nameServerClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, NameServer_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) CreateDir(ctx context.Context, in *CreateDirRequest, opts ...grpc.CallOption) (*CreateDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirResponse)
	err := c.cc.Invoke(ctx, NameServer_CreateDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, NameServer_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) DeleteDir(ctx context.Context, in *DeleteDirRequest, opts ...grpc.CallOption) (*DeleteDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDirResponse)
	err := c.cc.Invoke(ctx, NameServer_DeleteDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDirResponse)
	err := c.cc.Invoke(ctx, NameServer_ListDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) StatFile(ctx context.Context, in *StatFileRequest, opts ...grpc.CallOption) (*StatFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatFileResponse)
	err := c.cc.Invoke(ctx, NameServer_StatFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) OpenFile(ctx context.Context, in *OpenFileRequest, opts ...grpc.CallOption) (*OpenFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenFileResponse)
	err := c.cc.Invoke(ctx, NameServer_OpenFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) CloseFile(ctx context.Context, in *CloseFileRequest, opts ...grpc.CallOption) (*CloseFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseFileResponse)
	err := c.cc.Invoke(ctx, NameServer_CloseFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServerClient) PrepareWrite(ctx context.Context, in *PrepareWriteRequest, opts ...grpc.CallOption) (*PrepareWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareWriteResponse)
	err := c.cc.Invoke(ctx, NameServer_PrepareWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServerServer is the server API for NameServer service.
// All implementations must embed UnimplementedNameServerServer
// for forward compatibility.
type NameServerServer interface {
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error)
	ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error)
	StatFile(context.Context, *StatFileRequest) (*StatFileResponse, error)
	OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error)
	CloseFile(context.Context, *CloseFileRequest) (*CloseFileResponse, error)
	PrepareWrite(context.Context, *PrepareWriteRequest) (*PrepareWriteResponse, error)
	mustEmbedUnimplementedNameServerServer()
}

// UnimplementedNameServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNameServerServer struct{}

func (UnimplementedNameServerServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedNameServerServer) CreateDir(context.Context, *CreateDirRequest) (*CreateDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedNameServerServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedNameServerServer) DeleteDir(context.Context, *DeleteDirRequest) (*DeleteDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDir not implemented")
}
func (UnimplementedNameServerServer) ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedNameServerServer) StatFile(context.Context, *StatFileRequest) (*StatFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatFile not implemented")
}
func (UnimplementedNameServerServer) OpenFile(context.Context, *OpenFileRequest) (*OpenFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedNameServerServer) CloseFile(context.Context, *CloseFileRequest) (*CloseFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseFile not implemented")
}
func (UnimplementedNameServerServer) PrepareWrite(context.Context, *PrepareWriteRequest) (*PrepareWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareWrite not implemented")
}
func (UnimplementedNameServerServer) mustEmbedUnimplementedNameServerServer() {}
func (UnimplementedNameServerServer) testEmbeddedByValue()                    {}

// UnsafeNameServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServerServer will
// result in compilation errors.
type UnsafeNameServerServer interface {
	mustEmbedUnimplementedNameServerServer()
}

func RegisterNameServerServer(s grpc.ServiceRegistrar, srv NameServerServer) {
	// If the following call pancis, it indicates UnimplementedNameServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NameServer_ServiceDesc, srv)
}

func _NameServer_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_CreateDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).CreateDir(ctx, req.(*CreateDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_DeleteDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).DeleteDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_DeleteDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).DeleteDir(ctx, req.(*DeleteDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_ListDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).ListDir(ctx, req.(*ListDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_StatFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).StatFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_StatFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).StatFile(ctx, req.(*StatFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_OpenFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).OpenFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_OpenFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).OpenFile(ctx, req.(*OpenFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_CloseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).CloseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_CloseFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).CloseFile(ctx, req.(*CloseFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameServer_PrepareWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServerServer).PrepareWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameServer_PrepareWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServerServer).PrepareWrite(ctx, req.(*PrepareWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameServer_ServiceDesc is the grpc.ServiceDesc for NameServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nameserver.NameServer",
	HandlerType: (*NameServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFile",
			Handler:    _NameServer_CreateFile_Handler,
		},
		{
			MethodName: "CreateDir",
			Handler:    _NameServer_CreateDir_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _NameServer_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _NameServer_DeleteDir_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _NameServer_ListDir_Handler,
		},
		{
			MethodName: "StatFile",
			Handler:    _NameServer_StatFile_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _NameServer_OpenFile_Handler,
		},
		{
			MethodName: "CloseFile",
			Handler:    _NameServer_CloseFile_Handler,
		},
		{
			MethodName: "PrepareWrite",
			Handler:    _NameServer_PrepareWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nameserver.proto",
}
